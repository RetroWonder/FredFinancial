// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3EaMA65xrPs96BzDRgA4Kb
// Component: _mNL0lQFsbyYOR
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_fred_financial.module.css"; // plasmic-import: 3EaMA65xrPs96BzDRgA4Kb/projectcss
import sty from "./PlasmicFooterMain.module.css"; // plasmic-import: _mNL0lQFsbyYOR/css

export type PlasmicFooterMain__VariantMembers = {};

export type PlasmicFooterMain__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooterMain__VariantsArgs;
export const PlasmicFooterMain__VariantProps = new Array<VariantPropType>();

export type PlasmicFooterMain__ArgsType = {};
type ArgPropType = keyof PlasmicFooterMain__ArgsType;
export const PlasmicFooterMain__ArgProps = new Array<ArgPropType>();

export type PlasmicFooterMain__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  rowWrapper?: p.Flex<"div">;
  colmn1?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultFooterMainProps {
  className?: string;
}

function PlasmicFooterMain__RenderFunc(props: {
  variants: PlasmicFooterMain__VariantsArgs;
  args: PlasmicFooterMain__ArgsType;
  overrides: PlasmicFooterMain__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        {true ? (
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"rowWrapper"}
              data-plasmic-override={overrides.rowWrapper}
              hasGap={true}
              className={classNames(projectcss.all, sty.rowWrapper)}
            >
              <div
                data-plasmic-name={"colmn1"}
                data-plasmic-override={overrides.colmn1}
                className={classNames(projectcss.all, sty.colmn1)}
              >
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {"Â© Fred Financial, all rights reserved."}
                </div>
              </div>
            </p.Stack>
          </div>
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "rowWrapper", "colmn1", "text"],
  freeBox: ["freeBox", "rowWrapper", "colmn1", "text"],
  rowWrapper: ["rowWrapper", "colmn1", "text"],
  colmn1: ["colmn1", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  rowWrapper: "div";
  colmn1: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooterMain__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooterMain__VariantsArgs;
    args?: PlasmicFooterMain__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooterMain__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooterMain__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooterMain__ArgProps,
      internalVariantPropNames: PlasmicFooterMain__VariantProps
    });

    return PlasmicFooterMain__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterMain";
  } else {
    func.displayName = `PlasmicFooterMain.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterMain = Object.assign(
  // Top-level PlasmicFooterMain renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    rowWrapper: makeNodeComponent("rowWrapper"),
    colmn1: makeNodeComponent("colmn1"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicFooterMain
    internalVariantProps: PlasmicFooterMain__VariantProps,
    internalArgProps: PlasmicFooterMain__ArgProps
  }
);

export default PlasmicFooterMain;
/* prettier-ignore-end */
