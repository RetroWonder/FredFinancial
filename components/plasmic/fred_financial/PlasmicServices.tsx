// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3EaMA65xrPs96BzDRgA4Kb
// Component: DEPk3RMDp5eK7Q
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: DaobuC4oPpHEJz/component
import ServiceDark from "../../ServiceDark"; // plasmic-import: niCxVfw7cgm875/component
import HomeFooterTop from "../../HomeFooterTop"; // plasmic-import: FSbb_AqntfVa2/component
import FooterMain from "../../FooterMain"; // plasmic-import: _mNL0lQFsbyYOR/component

import { useScreenVariants as useScreenVariants_8PwCrrkFl0Usl } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 8pwCrrkFl0Usl_/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_fred_financial.module.css"; // plasmic-import: 3EaMA65xrPs96BzDRgA4Kb/projectcss
import sty from "./PlasmicServices.module.css"; // plasmic-import: DEPk3RMDp5eK7Q/css

export type PlasmicServices__VariantMembers = {};

export type PlasmicServices__VariantsArgs = {};
type VariantPropType = keyof PlasmicServices__VariantsArgs;
export const PlasmicServices__VariantProps = new Array<VariantPropType>();

export type PlasmicServices__ArgsType = {};
type ArgPropType = keyof PlasmicServices__ArgsType;
export const PlasmicServices__ArgProps = new Array<ArgPropType>();

export type PlasmicServices__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  aboutUsBanner?: p.Flex<"div">;
  foreground2?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  serviceRow2?: p.Flex<"div">;
  footerTopSection?: p.Flex<"div">;
  homeFooterTop?: p.Flex<typeof HomeFooterTop>;
  footerMain?: p.Flex<typeof FooterMain>;
};

export interface DefaultServicesProps {}

function PlasmicServices__RenderFunc(props: {
  variants: PlasmicServices__VariantsArgs;
  args: PlasmicServices__ArgsType;
  overrides: PlasmicServices__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_8PwCrrkFl0Usl()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"Service"}</title>
        <meta key="og:title" property="og:title" content={"Service"} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"aboutUsBanner"}
            data-plasmic-override={overrides.aboutUsBanner}
            className={classNames(projectcss.all, sty.aboutUsBanner)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__veYv)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {"Services"}
                </h1>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pmdC5
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "Lorem Ipsum is simply dummy text of the printing and typesetting indstandard dummy text ever since the 1500s."
                    : "These are the services that Fred Financial offers"}
                </div>
              </p.Stack>
            </p.Stack>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__x1TMm)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iNqcB)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"serviceRow2"}
                data-plasmic-override={overrides.serviceRow2}
                hasGap={true}
                className={classNames(projectcss.all, sty.serviceRow2)}
              >
                <div className={classNames(projectcss.all, sty.column__zxJPa)}>
                  {true ? (
                    <ServiceDark
                      className={classNames(
                        "__wab_instance",
                        sty.serviceDark__uirY
                      )}
                      slot={
                        "We help minimize your debt, so you have more money for the future!"
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9ExQc
                        )}
                      >
                        {"Debt Mitigation"}
                      </div>
                    </ServiceDark>
                  ) : null}
                </div>

                <div className={classNames(projectcss.all, sty.column__vwxKu)}>
                  {true ? (
                    <ServiceDark
                      className={classNames(
                        "__wab_instance",
                        sty.serviceDark__u2DrF
                      )}
                      slot={
                        "We help you invest in the best companies to help grow your budget"
                      }
                    >
                      {"Investment & Savings"}
                    </ServiceDark>
                  ) : null}
                </div>

                <div className={classNames(projectcss.all, sty.column__j5EaE)}>
                  {true ? (
                    <ServiceDark
                      className={classNames(
                        "__wab_instance",
                        sty.serviceDark__kxMpC
                      )}
                      slot={
                        "We will help evaluate your finances and create a personalized budget for you!"
                      }
                    >
                      {"Financial Planning & Budgeting"}
                    </ServiceDark>
                  ) : null}
                </div>
              </p.Stack>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"footerTopSection"}
            data-plasmic-override={overrides.footerTopSection}
            className={classNames(projectcss.all, sty.footerTopSection)}
          >
            <HomeFooterTop
              data-plasmic-name={"homeFooterTop"}
              data-plasmic-override={overrides.homeFooterTop}
              className={classNames("__wab_instance", sty.homeFooterTop)}
            />
          </div>

          <FooterMain
            data-plasmic-name={"footerMain"}
            data-plasmic-override={overrides.footerMain}
            className={classNames("__wab_instance", sty.footerMain)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "aboutUsBanner",
    "foreground2",
    "h1",
    "serviceRow2",
    "footerTopSection",
    "homeFooterTop",
    "footerMain"
  ],
  header: ["header"],
  aboutUsBanner: ["aboutUsBanner", "foreground2", "h1"],
  foreground2: ["foreground2", "h1"],
  h1: ["h1"],
  serviceRow2: ["serviceRow2"],
  footerTopSection: ["footerTopSection", "homeFooterTop"],
  homeFooterTop: ["homeFooterTop"],
  footerMain: ["footerMain"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  aboutUsBanner: "div";
  foreground2: "div";
  h1: "h1";
  serviceRow2: "div";
  footerTopSection: "div";
  homeFooterTop: typeof HomeFooterTop;
  footerMain: typeof FooterMain;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicServices__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicServices__VariantsArgs;
    args?: PlasmicServices__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicServices__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicServices__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicServices__ArgProps,
      internalVariantPropNames: PlasmicServices__VariantProps
    });

    return PlasmicServices__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicServices";
  } else {
    func.displayName = `PlasmicServices.${nodeName}`;
  }
  return func;
}

export const PlasmicServices = Object.assign(
  // Top-level PlasmicServices renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    aboutUsBanner: makeNodeComponent("aboutUsBanner"),
    foreground2: makeNodeComponent("foreground2"),
    h1: makeNodeComponent("h1"),
    serviceRow2: makeNodeComponent("serviceRow2"),
    footerTopSection: makeNodeComponent("footerTopSection"),
    homeFooterTop: makeNodeComponent("homeFooterTop"),
    footerMain: makeNodeComponent("footerMain"),

    // Metadata about props expected for PlasmicServices
    internalVariantProps: PlasmicServices__VariantProps,
    internalArgProps: PlasmicServices__ArgProps
  }
);

export default PlasmicServices;
/* prettier-ignore-end */
