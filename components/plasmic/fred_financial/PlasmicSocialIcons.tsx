// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3EaMA65xrPs96BzDRgA4Kb
// Component: UoXjh9nE_CJ7V
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_fred_financial.module.css"; // plasmic-import: 3EaMA65xrPs96BzDRgA4Kb/projectcss
import sty from "./PlasmicSocialIcons.module.css"; // plasmic-import: UoXjh9nE_CJ7V/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: dvwEd_BkKtwJza/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: wi3VKWekO_oGyW/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: cbWCu6uJd49iyl/icon

export type PlasmicSocialIcons__VariantMembers = {};

export type PlasmicSocialIcons__VariantsArgs = {};
type VariantPropType = keyof PlasmicSocialIcons__VariantsArgs;
export const PlasmicSocialIcons__VariantProps = new Array<VariantPropType>();

export type PlasmicSocialIcons__ArgsType = {};
type ArgPropType = keyof PlasmicSocialIcons__ArgsType;
export const PlasmicSocialIcons__ArgProps = new Array<ArgPropType>();

export type PlasmicSocialIcons__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultSocialIconsProps {
  className?: string;
}

function PlasmicSocialIcons__RenderFunc(props: {
  variants: PlasmicSocialIcons__VariantsArgs;
  args: PlasmicSocialIcons__ArgsType;
  overrides: PlasmicSocialIcons__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <IconIcon
          className={classNames(projectcss.all, sty.svg___9Vdde)}
          href={"https://www.linkedin.com/" as const}
          link={"https://www.linkedin.com/" as const}
          role={"img"}
        />

        <Icon2Icon
          className={classNames(projectcss.all, sty.svg__kXenn)}
          role={"img"}
        />

        <Icon3Icon
          className={classNames(projectcss.all, sty.svg__sYr4)}
          role={"img"}
        />
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSocialIcons__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSocialIcons__VariantsArgs;
    args?: PlasmicSocialIcons__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSocialIcons__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSocialIcons__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSocialIcons__ArgProps,
      internalVariantPropNames: PlasmicSocialIcons__VariantProps
    });

    return PlasmicSocialIcons__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSocialIcons";
  } else {
    func.displayName = `PlasmicSocialIcons.${nodeName}`;
  }
  return func;
}

export const PlasmicSocialIcons = Object.assign(
  // Top-level PlasmicSocialIcons renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSocialIcons
    internalVariantProps: PlasmicSocialIcons__VariantProps,
    internalArgProps: PlasmicSocialIcons__ArgProps
  }
);

export default PlasmicSocialIcons;
/* prettier-ignore-end */
